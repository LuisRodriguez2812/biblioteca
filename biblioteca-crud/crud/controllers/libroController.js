const Libro = require('../database/models/Libro');
const Categoria = require('../database/models/Categoria');

// üìö Listar todos los libros (solo admins o usuarios autenticados)
exports.listar = async (req, res) => {
  try {
    const libros = await Libro.listar();
    res.render('libros/listar', { libros });
  } catch (error) {
    console.error('Error al listar libros:', error);
    res.status(500).send('Error al obtener la lista de libros');
  }
};

// üìù Mostrar formulario de creaci√≥n
exports.crearForm = async (req, res) => {
  try {
    const categorias = await Categoria.listar();
    res.render('libros/crear', { categorias });
  } catch (error) {
    console.error('Error al cargar formulario de creaci√≥n:', error);
    res.status(500).send('Error al cargar el formulario');
  }
};

// üìå Crear un nuevo libro
exports.crear = async (req, res) => {
  try {
    const { titulo, autor, ISBN, estado, categoriaId, stock } = req.body;
    await Libro.crear(titulo, autor, ISBN, estado || 'disponible', categoriaId, stock || 1);
    res.redirect('/libros');
  } catch (error) {
    console.error('Error al crear libro:', error);
    res.status(500).send('Error al crear el libro');
  }
};

// üîç Mostrar detalles de un libro
exports.mostrar = async (req, res) => {
  try {
    const libro = await Libro.encontrarPorId(req.params.id);
    if (!libro) return res.status(404).send('Libro no encontrado');
    res.render('libros/mostrar', { libro });
  } catch (error) {
    console.error('Error al mostrar libro:', error);
    res.status(500).send('Error al obtener el libro');
  }
};

// üõ† Mostrar formulario de edici√≥n
exports.editarForm = async (req, res) => {
  try {
    const libro = await Libro.encontrarPorId(req.params.id);
    const categorias = await Categoria.listar();
    if (!libro) return res.status(404).send('Libro no encontrado');
    res.render('libros/editar', { libro, categorias });
  } catch (error) {
    console.error('Error al cargar formulario de edici√≥n:', error);
    res.status(500).send('Error al cargar el formulario de edici√≥n');
  }
};

// üîÑ Actualizar libro
exports.actualizar = async (req, res) => {
  try {
    const { id } = req.params;
    const { titulo, autor, ISBN, estado, categoriaId, stock } = req.body;

    await Libro.actualizar(id, {
      titulo,
      autor,
      ISBN,
      estado,
      categoria_id: categoriaId || null,
      stock: stock || 1
    });

    res.redirect(`/libros/${id}`);
  } catch (error) {
    console.error('Error al actualizar libro:', error);
    const libro = await Libro.encontrarPorId(req.params.id);
    res.render('libros/editar', {
      libro,
      error: 'Error al actualizar el libro'
    });
  }
};

// üóëÔ∏è Eliminar libro
exports.eliminar = async (req, res) => {
  try {
    await Libro.eliminar(req.params.id);
    res.redirect('/libros');
  } catch (error) {
    console.error('Error al eliminar libro:', error);
    res.status(500).send('Error al eliminar el libro');
  }
};

// üìã Mostrar lista de pr√©stamos
exports.mostrarPrestamos = async (req, res) => {
  try {
    const librosPrestados = await Libro.listarPrestamos();
    res.render('libros/prestamos', { libros: librosPrestados });
  } catch (error) {
    console.error('Error al obtener los pr√©stamos:', error);
    res.status(500).send('Error al cargar los pr√©stamos');
  }
};

// üåê Vista p√∫blica para visitantes (portada con cat√°logo)
exports.catalogoPublico = async (req, res) => {
  try {
    const libros = await Libro.listar(); // ‚úÖ Aseg√∫rate que cada libro tenga: id, titulo, autor, ISBN, estado, stock
    res.render('visitante/index', { libros });
  } catch (error) {
    console.error('Error al cargar cat√°logo p√∫blico:', error);
    res.status(500).send('Error al mostrar los libros al visitante');
  }
};
